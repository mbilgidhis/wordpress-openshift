---
kind: Template
apiVersion: v1
metadata:
  name: wordpress-template
  annotations:
    openshift.io/display-name: WordPress and MySQL
    iconClass: icon-php
    description: This is an example of template for deploying Wordpress v5.2.6 on Openshift v3.9. Using persistent storage on MySQL 5.6 and PHP 5.6.
labels:
  template: wordpress-template

parameters:
  - name: APPLICATION_NAME
    description: Application name
    value: wordpress
    required: true
  - name: SOURCE_REPOSITORY_URL
    description: URL Repo Github
    value: https://github.com/mbilgidhis/wordpress-openshift.git
    required: true
  - name: SOURCE_REPOSITORY_BRANCH
    description: Branch of repository
    value: master
  - name: CONTEXT_DIR
    description: Relative path of project
    value: wordpress
  - name: GITHUB_WEBHOOK_SECRET
    description: Github secret for webhook
    generate: expression
    from: "[a-zA-Z0-9]{40}"
  - name: APPLICATION_DOMAIN
    description: Domain that will be used
    value:
  - name: DATABASE_NAME
    description: Database name
    value: wordpress
    required: true
  - name: DATABASE_USER
    description: Database user
    value: wordpress
    required: true
  - name: DATABASE_PASSWORD
    description: Database password
    generate: expression
    from: "[a-zA-Z0-9]{16}"


objects:
  ## Service Wordpress
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Service for wordpress website
        service.alpha.openshift.io/dependencies: "[{'name': '${APPLICATION_NAME}-mysql', 'kind': 'Service'}]"
    spec:
      ports:
        - name: web
          port: 8080 # Ga pakai 80 biar ga harus pakai root
          targetPort: 8080
      selector:
        name: ${APPLICATION_NAME}
  
  ## Wordpress Route
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${APPLICATION_NAME}

  ## Wordpress ImageStream
  - kind: ImageStream
    apiVersion: v1
    metadata: 
      name: ${APPLICATION_NAME}
      annotations:
        description: Application ImageStream for Wordpress using PHP 5.6

  ## Wordpress BuildConfig
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: BuildConfig for Wordpress application image
    spec:
      source:
        type: Git
        git:
          uri: ${SOURCE_REPOSITORY_URL}
          ref: ${SOURCE_REPOSITORY_REF}
        contextDir: ${CONTEXT_DIR}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: php:5.6
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      triggers:
          - type: ImageChange
          - type: ConfigChange
          - type: GitHub
            github: 
              secret: ${GITHUB_WEBHOOK_SECRET}

  ## Wordpress PersistentVolumeClaim for uploads folder
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata: 
      name: ${APPLICATION_NAME}-uploads-folder
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
  
  ## Wordpress DeploymentConfig
  - kind: DeploymentConfig
    apiVersion: v1
    metadata: 
      name: ${APPLICATION_NAME}
      annotations:
        description: DeploymentConfig for Wordpress application
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
      replicas: 1
      selector:
        name: ${APPLICATION_NAME}
      template:
        metadata:
          name: ${APPLICATION_NAME}
          labels:
            name: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: ${APPLICATION_NAME
              ports:
                - containerPort: 8080
              env:
                - name: WORDPRESS_DB_HOST
                  value: ${APPLICATION_NAME}-mysql
                - name: WORDPRESS_DB_NAME
                  value: ${DATABASE_NAME}
                - name: WORDPRESS_DB_USER
                  value: ${DATABASE_USER}
                - name: WORDPRESS_DB_PASSWORD
                  value: ${DATABASE_PASSWORD}
              volumeMounts:
                - name: ${APPLICATION_NAME}-uploads-folder
                  mountPath: /opt/app-root/src/pv-uploads
          volumes:
            - name: ${APPLICATION_NAME}-uploads-folder
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-uploads-folder

  ## MySQL Service
  - kind: Service
    apiVersion: v1
    metadata: 
      name: ${APPLICATION_NAME}-mysql
      annotations:
        description: Service for MySQL
    spec:
      ports:
        - name: mysql
          port: 3306
          targetPort: 3306
      selector:
        name: ${APPLICATION_NAME}-mysql

  ## MySQL PersistentVolumeClaim
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata: 
      name: ${APPLICATION_NAME}-mysql
    spec:
      accessModes:
        - ReadWriteOnce
      resource:
        requests:
          storage: 1Gi

  ## MySQL DeploymentConfig
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-mysql
      annotations:
        description: Deployment config for MySQL
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${APPLICATION_NAME}-mysql
      template:
        metadata:
          name: ${APPLICATION_NAME}-mysql
          labels:
            name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
            - name: mysql
              image: openshift3/mysql-56-rhel7
              ports:
                - containerPort: 3306
              env:
                - name: MYSQL_USER
                  value: ${DATABASE_USER}
                - name: MYSQL_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: MYSQL_DATABASE
                  value: ${DATABASE_NAME}
              volumeMounts:
                - name: ${APPLICATION_NAME}-mysql-data
                  mountPath: /var/lib/mysql/data
          volumes:
            - name: ${APPLICATION_NAME}-mysql-data
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-mysql

    